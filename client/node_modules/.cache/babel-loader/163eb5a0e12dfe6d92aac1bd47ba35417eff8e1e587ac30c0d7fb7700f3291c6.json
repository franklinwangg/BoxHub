{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\Projects\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Post\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Comment from '../Comment/Comment';\nimport UserContext from '../../../context/UserContext';\nimport \"./Post.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const location = useLocation();\n  const [comments, setComments] = useState([]);\n  const {\n    username,\n    setUsername\n  } = useContext(UserContext);\n  const [commentToPost, setCommentToPost] = useState(\"\");\n  const [isReadyToRender, setIsReadyToRender] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetchAndSortComments = async () => {\n      const fetchedComments = await fetchComments();\n      const fetchedCommentsJson = fetchedComments.rows;\n      const sortedComments = sortCommentsOnLevel(fetchedCommentsJson); // fetchedComments is not an array, it's an object\n      setComments(sortedComments);\n    };\n    fetchAndSortComments();\n    setIsReadyToRender(true);\n  }, []);\n  const handleReplySubmission = async () => {\n    const fetchedComments = await fetchComments();\n    setComments(fetchedComments.rows);\n  };\n  const handleSubmitCommentButton = async () => {\n    const author = username;\n    const comment = commentToPost;\n    const idOfParentPost = location.state.id;\n    console.log(\"AUTHOR : \", author);\n    setIsLoading(true);\n    try {\n      await fetch(`http://localhost:5000/api/comments/${idOfParentPost}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          author: author,\n          comment: comment,\n          idOfParentPost: idOfParentPost,\n          level: 0\n        })\n      });\n      const fetchedComments = await fetchComments();\n\n      // while we await it, have the button turn grey, and have a little swirling loading sign replace the text on the button\n      setComments(fetchedComments.rows);\n      setCommentToPost(\"\");\n    } catch (error) {\n      console.log(\"uh oh! error is \", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const changeCommentToPost = event => {\n    setCommentToPost(event.target.value);\n  };\n  const fetchComments = async () => {\n    try {\n      const postId = location.state.id;\n      const response = await fetch(`http://localhost:5000/api/comments/${postId}`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(\"Error fetching comments : \", error);\n    }\n  };\n  const sortCommentsOnLevel = dataComments => {\n    // sort the comments on order, so all 0's in front, then 1's, etc\n\n    if (dataComments.length === 0) {\n      return dataComments;\n    }\n    const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\n      if (firstComment.level > secondComment.level) {\n        return 1;\n      } else if (firstComment.level === secondComment.level) {\n        return 0;\n      } else return -1;\n    });\n    return sortedDataComments;\n  };\n  const divideCommentsIntoLevelArrays = () => {\n    // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\n\n    // why does dCILA get called again when button is clicked?\n    const levelArrays = [];\n    var currLevel = 0;\n    while (true) {\n      const temp = comments.filter(comment => {\n        // comments isn't an array yet\n        return comment.level === currLevel;\n      });\n      if (temp.length === 0) {\n        break;\n      } else {\n        levelArrays.push(temp);\n        currLevel++;\n      }\n    }\n    return levelArrays;\n  };\n  const renderEachLevel = (levelArrays, currentComment, level) => {\n    const renderedComments = [];\n    const temp = [];\n    // render itself\n\n    renderedComments.push(renderComment(currentComment));\n\n    // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \n    // trigger outOfBounds error\n    if (level === levelArrays.length - 1) {\n      return renderedComments;\n    } else {\n      // find all matching child comments in next level\n      for (let i = 0; i < levelArrays[level + 1].length; i++) {\n        if (levelArrays[level + 1][i].parent_comment_id == currentComment.id) {\n          // parentCommentId undefined?\n          temp.push(levelArrays[level + 1][i]);\n        }\n      }\n\n      // render all of its child comments\n\n      for (let i = 0; i < temp.length; i++) {\n        const arrayOfChildElementsHTML = renderEachLevel(levelArrays, temp[i], level + 1);\n        for (let j = 0; j < arrayOfChildElementsHTML.length; j++) {\n          renderedComments.push(arrayOfChildElementsHTML[j]);\n        }\n      }\n\n      // if no children, then return renderedComments\n\n      return renderedComments;\n    }\n\n    // 1) render itself\n\n    // 2) make empty array\n    // 3) go through next level array and add any posts whose parentComment matches postId to array\n    // 4) for every element in array : \n    // 5) renderComment(postId, level + 1)\n  };\n  const renderComment = comment => {\n    return (\n      /*#__PURE__*/\n      // <Comment />\n      _jsxDEV(Comment, {\n        post: location.state.id,\n        author: comment.author,\n        comment: comment.content,\n        level: comment.level,\n        id: comment.id,\n        handleReplySubmission: handleReplySubmission\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)\n    );\n  };\n  const renderComments = () => {\n    if (comments.length === 0) {\n      // console.log(\"no comments available to render yet\");\n    } else {\n      const overallRenderedComments = [];\n      const levelArrays = divideCommentsIntoLevelArrays(); // not an array\n\n      for (let i = 0; i < levelArrays[0].length; i++) {\n        const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\n        for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\n          overallRenderedComments.push( /*#__PURE__*/React.cloneElement(arrayOfRecursiveElementsHTML[j], {\n            key: arrayOfRecursiveElementsHTML[j].props.id\n          }));\n        }\n      }\n      return overallRenderedComments;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-title-and-description-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-title-div\",\n        children: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-description-div\",\n        children: location.state.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"post-new-comment-box\",\n      value: commentToPost,\n      placeholder: \"Post comment here\",\n      onChange: changeCommentToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-comment-button\",\n      onClick: handleSubmitCommentButton,\n      children: () => {\n        console.log(\"loading? \", isLoading);\n        if (isLoading) {\n          console.log(\"rn should be 1\");\n          return (\n            /*#__PURE__*/\n            // the spinning thing\n            _jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 33\n            }, this)\n          );\n        } else {\n          console.log(\"rn should be 2\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 33\n          }, this);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: isReadyToRender ? renderComments() : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading comments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"k8pCGNIVUFu1RzIpLE6DBSg0USM=\", false, function () {\n  return [useLocation];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","Comment","UserContext","jsxDEV","_jsxDEV","Post","_s","location","comments","setComments","username","setUsername","commentToPost","setCommentToPost","isReadyToRender","setIsReadyToRender","isLoading","setIsLoading","fetchAndSortComments","fetchedComments","fetchComments","fetchedCommentsJson","rows","sortedComments","sortCommentsOnLevel","handleReplySubmission","handleSubmitCommentButton","author","comment","idOfParentPost","state","id","console","log","fetch","method","headers","body","JSON","stringify","level","error","changeCommentToPost","event","target","value","postId","response","data","json","dataComments","length","sortedDataComments","sort","firstComment","secondComment","divideCommentsIntoLevelArrays","levelArrays","currLevel","temp","filter","push","renderEachLevel","currentComment","renderedComments","renderComment","i","parent_comment_id","arrayOfChildElementsHTML","j","post","content","fileName","_jsxFileName","lineNumber","columnNumber","renderComments","overallRenderedComments","arrayOfRecursiveElementsHTML","cloneElement","key","props","children","title","description","type","placeholder","onChange","onClick","className","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/Projects/Boxing Forum Website/client/src/components/Posts/Post/Post.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Comment from '../Comment/Comment';\r\nimport UserContext from '../../../context/UserContext';\r\nimport \"./Post.css\";\r\n\r\n\r\nconst Post = () => {\r\n\r\n    const location = useLocation();\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const { username, setUsername } = useContext(UserContext);\r\n    const [commentToPost, setCommentToPost] = useState(\"\");\r\n    const [isReadyToRender, setIsReadyToRender] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchAndSortComments = async () => {\r\n            const fetchedComments = await fetchComments();\r\n            const fetchedCommentsJson = fetchedComments.rows;\r\n\r\n            const sortedComments = sortCommentsOnLevel(fetchedCommentsJson); // fetchedComments is not an array, it's an object\r\n            setComments(sortedComments);\r\n        };\r\n\r\n        fetchAndSortComments();\r\n\r\n        \r\n        setIsReadyToRender(true);\r\n    }, []);\r\n\r\n    const handleReplySubmission = async () => {\r\n        \r\n        const fetchedComments = await fetchComments();\r\n        setComments(fetchedComments.rows);\r\n\r\n    };\r\n\r\n    const handleSubmitCommentButton = async () => {\r\n\r\n        const author = username;\r\n        const comment = commentToPost;\r\n        const idOfParentPost = location.state.id;\r\n\r\n        console.log(\"AUTHOR : \", author);\r\n\r\n        setIsLoading(true);\r\n        try {\r\n            await fetch(`http://localhost:5000/api/comments/${idOfParentPost}`, {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    author: author,\r\n                    comment: comment,\r\n                    idOfParentPost: idOfParentPost,\r\n                    level: 0\r\n                })\r\n            });\r\n    \r\n            const fetchedComments = await fetchComments();\r\n\r\n            // while we await it, have the button turn grey, and have a little swirling loading sign replace the text on the button\r\n            setComments(fetchedComments.rows);\r\n            setCommentToPost(\"\");\r\n        }\r\n        catch(error) {\r\n            console.log(\"uh oh! error is \", error);\r\n        }\r\n        finally {\r\n            setIsLoading(false);\r\n        }\r\n\r\n    };\r\n\r\n    const changeCommentToPost = (event) => {\r\n        setCommentToPost(event.target.value);\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            const postId = location.state.id;\r\n            const response = await fetch(`http://localhost:5000/api/comments/${postId}`); \r\n\r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error fetching comments : \", error);\r\n        }\r\n    };\r\n\r\n    const sortCommentsOnLevel = (dataComments) => {\r\n        // sort the comments on order, so all 0's in front, then 1's, etc\r\n\r\n        if(dataComments.length === 0) {\r\n            return dataComments;\r\n        }\r\n\r\n        const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\r\n            if (firstComment.level > secondComment.level) {\r\n                return 1;\r\n            }\r\n            else if (firstComment.level === secondComment.level) {\r\n                return 0;\r\n            }\r\n            else return -1;\r\n        });\r\n        return sortedDataComments;\r\n    }\r\n\r\n    const divideCommentsIntoLevelArrays = () => {\r\n        // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\r\n\r\n        // why does dCILA get called again when button is clicked?\r\n        const levelArrays = [];\r\n        var currLevel = 0;\r\n\r\n        while (true) {\r\n            \r\n            const temp = comments.filter((comment) => { // comments isn't an array yet\r\n                return comment.level === currLevel;\r\n            });\r\n            if (temp.length === 0) {\r\n\r\n                break;\r\n            }\r\n            else {\r\n\r\n                levelArrays.push(temp);\r\n                currLevel++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return levelArrays;\r\n    };\r\n\r\n    const renderEachLevel = (levelArrays, currentComment, level) => {\r\n\r\n        const renderedComments = [];\r\n        const temp = [];\r\n        // render itself\r\n\r\n        renderedComments.push(renderComment(currentComment));\r\n\r\n        // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \r\n        // trigger outOfBounds error\r\n        if (level === levelArrays.length - 1) {\r\n\r\n            return renderedComments;\r\n        }\r\n        else {\r\n            // find all matching child comments in next level\r\n            for (let i = 0; i < levelArrays[level + 1].length; i++) {\r\n                if (levelArrays[level + 1][i].parent_comment_id == currentComment.id) { // parentCommentId undefined?\r\n                    temp.push(levelArrays[level + 1][i]);\r\n\r\n                }\r\n            }\r\n\r\n            // render all of its child comments\r\n\r\n            for(let i = 0; i < temp.length; i ++) {\r\n                const arrayOfChildElementsHTML = renderEachLevel(levelArrays, temp[i], level + 1);\r\n                for(let j = 0; j < arrayOfChildElementsHTML.length; j ++) {\r\n                    renderedComments.push(arrayOfChildElementsHTML[j]);\r\n                }\r\n            }\r\n\r\n            // if no children, then return renderedComments\r\n\r\n            return renderedComments;\r\n        }\r\n\r\n        // 1) render itself\r\n\r\n        // 2) make empty array\r\n        // 3) go through next level array and add any posts whose parentComment matches postId to array\r\n        // 4) for every element in array : \r\n        // 5) renderComment(postId, level + 1)\r\n\r\n    };\r\n\r\n    const renderComment = (comment) => {\r\n\r\n        return (\r\n            // <Comment />\r\n            <Comment post={location.state.id} author={comment.author} comment={comment.content} level={comment.level} id={comment.id} \r\n            handleReplySubmission = {handleReplySubmission}/>\r\n            \r\n        );\r\n    };\r\n\r\n    const renderComments = () => {\r\n        if (comments.length === 0) {\r\n            // console.log(\"no comments available to render yet\");\r\n        }\r\n        else {\r\n            const overallRenderedComments = [];\r\n            const levelArrays = divideCommentsIntoLevelArrays(); // not an array\r\n            \r\n            for (let i = 0; i < levelArrays[0].length; i++) {\r\n                const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\r\n                for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\r\n                    overallRenderedComments.push(\r\n                        React.cloneElement(arrayOfRecursiveElementsHTML[j], { key: arrayOfRecursiveElementsHTML[j].props.id })\r\n                    );\r\n                }\r\n            }\r\n\r\n            return overallRenderedComments;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div id=\"post-title-and-description-section\">\r\n                <div id=\"post-title-div\">{location.state.title}</div>\r\n                <div id=\"post-description-div\">{location.state.description}</div>\r\n            </div>\r\n\r\n            <input type=\"text\" id=\"post-new-comment-box\" value={commentToPost}\r\n                placeholder=\"Post comment here\" onChange={changeCommentToPost}></input>\r\n            <button id=\"submit-comment-button\" onClick={handleSubmitCommentButton}>\r\n                \r\n                {\r\n                    () => {\r\n                        console.log(\"loading? \", isLoading);\r\n                        if(isLoading) {\r\n                            console.log(\"rn should be 1\");\r\n\r\n                            return(\r\n                                // the spinning thing\r\n                                <div></div>\r\n                            );\r\n                        }\r\n                        else {\r\n                            console.log(\"rn should be 2\");\r\n                            return(\r\n                                <div>Submit</div>\r\n                            );\r\n                        }\r\n                    }\r\n                }</button>\r\n\r\n            <div className=\"comments-section\">\r\n                {isReadyToRender ? renderComments() : <p>Loading comments...</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}