{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\Projects\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Post\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Comment from '../Comment/Comment';\nimport UserContext from '../../../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const location = useLocation();\n  const [comments, setComments] = useState([]);\n  const {\n    username,\n    setUsername\n  } = useContext(UserContext);\n  const [commentToPost, setCommentToPost] = useState(\"\");\n  const [isReadyToRender, setIsReadyToRender] = useState(false);\n  useEffect(() => {\n    const fetchAndSortComments = async () => {\n      const fetchedComments = await fetchComments();\n      const sortedComments = sortCommentsOnLevel(fetchedComments);\n      setComments(sortedComments);\n    };\n    fetchAndSortComments();\n    setIsReadyToRender(true);\n  }, []);\n  const handleSubmitCommentButton = async () => {\n    console.log(\"0\");\n    await fetch(\"http://localhost:3001/postComment\", {\n      // const { author, comment, idOfParentPost, level } = req.body;\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        author: username,\n        comment: commentToPost,\n        idOfParentComment: location.state.id,\n        level: 0\n      })\n    });\n    console.log(\"1)\");\n  };\n  const changeCommentToPost = event => {\n    setCommentToPost(event.target.value);\n  };\n  const fetchComments = async () => {\n    try {\n      const postId = location.state._id;\n      const response = await fetch(`http://localhost:3001/post/${postId}/comments`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(\"Error fetching comments : \", error);\n    }\n  };\n  const sortCommentsOnLevel = dataComments => {\n    // sort the comments on order, so all 0's in front, then 1's, etc\n    const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\n      if (firstComment.level > secondComment.level) {\n        return 1;\n      } else if (firstComment.level === secondComment.level) {\n        return 0;\n      } else return -1;\n    });\n    return sortedDataComments;\n  };\n  const divideCommentsIntoLevelArrays = () => {\n    // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\n    const levelArrays = [];\n    var currLevel = 0;\n    while (true) {\n      const temp = comments.filter(comment => {\n        return comment.level === currLevel;\n      });\n      if (temp.length === 0) {\n        break;\n      } else {\n        levelArrays.push(temp);\n        currLevel++;\n      }\n    }\n    return levelArrays;\n  };\n  const renderEachLevel = (levelArrays, currentComment, level) => {\n    const renderedComments = [];\n    const temp = [];\n    // render itself\n\n    renderedComments.push(renderComment(currentComment));\n\n    // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \n    // trigger outOfBounds error\n    if (level === levelArrays.length - 1) {\n      return renderedComments;\n    } else {\n      // find all matching child comments in next level\n      for (let i = 0; i < levelArrays[level + 1].length; i++) {\n        if (levelArrays[level + 1][i].idOfParentComment === currentComment._id) {\n          // parentCommentId undefined?\n\n          temp.push(levelArrays[level + 1][i]);\n        }\n      }\n\n      // render all of its child comments\n      for (let k = 0; k < temp.length; k++) {\n        const renderedLevel = renderEachLevel(levelArrays, temp[k], level + 1);\n        for (let l = 0; l < renderedLevel.length; l++) {\n          renderedComments.push(renderedLevel[l]);\n        }\n        return renderedComments;\n        // renderEachLevel(levelArrays, temp[k], level + 1);\n      }\n\n      // if no children, then return renderedComments\n      return renderedComments;\n    }\n\n    // 1) render itself\n\n    // 2) make empty array\n    // 3) go through next level array and add any posts whose parentComment matches postId to array\n    // 4) for every element in array : \n    // 5) renderComment(postId, level + 1)\n  };\n  const renderComment = comment => {\n    return (\n      /*#__PURE__*/\n      // <Comment />\n      _jsxDEV(Comment, {\n        post: location.state._id,\n        author: comment.author,\n        comment: comment.comment,\n        level: comment.level,\n        id: comment._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this)\n    );\n  };\n  const renderComments = () => {\n    if (comments.length === 0) {\n      console.log(\"no comments available to render yet\");\n    } else {\n      const overallRenderedComments = [];\n      const levelArrays = divideCommentsIntoLevelArrays();\n      for (let i = 0; i < levelArrays[0].length; i++) {\n        const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\n        for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\n          overallRenderedComments.push( /*#__PURE__*/React.cloneElement(arrayOfRecursiveElementsHTML[j], {\n            key: arrayOfRecursiveElementsHTML[j].props.id\n          }));\n        }\n      }\n      return overallRenderedComments;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-title-and-description-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-title-div\",\n        children: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-description-div\",\n        children: location.state.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"post-new-comment-box\",\n      value: commentToPost,\n      placeholder: \"Post comment here\",\n      onChange: changeCommentToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-comment-button\",\n      onClick: handleSubmitCommentButton,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: isReadyToRender ? renderComments() : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading comments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"ITN1dq39wdhNhv4nCP4vgugjp48=\", false, function () {\n  return [useLocation];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","Comment","UserContext","jsxDEV","_jsxDEV","Post","_s","location","comments","setComments","username","setUsername","commentToPost","setCommentToPost","isReadyToRender","setIsReadyToRender","fetchAndSortComments","fetchedComments","fetchComments","sortedComments","sortCommentsOnLevel","handleSubmitCommentButton","console","log","fetch","method","headers","body","JSON","stringify","author","comment","idOfParentComment","state","id","level","changeCommentToPost","event","target","value","postId","_id","response","data","json","error","dataComments","sortedDataComments","sort","firstComment","secondComment","divideCommentsIntoLevelArrays","levelArrays","currLevel","temp","filter","length","push","renderEachLevel","currentComment","renderedComments","renderComment","i","k","renderedLevel","l","post","fileName","_jsxFileName","lineNumber","columnNumber","renderComments","overallRenderedComments","arrayOfRecursiveElementsHTML","j","cloneElement","key","props","children","title","description","type","placeholder","onChange","onClick","className","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/Projects/Boxing Forum Website/client/src/components/Posts/Post/Post.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Comment from '../Comment/Comment';\r\nimport UserContext from '../../../context/UserContext';\r\n\r\n\r\nconst Post = () => {\r\n\r\n    const location = useLocation();\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const { username, setUsername } = useContext(UserContext);\r\n    const [commentToPost, setCommentToPost] = useState(\"\");\r\n    const [isReadyToRender, setIsReadyToRender] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchAndSortComments = async () => {\r\n            const fetchedComments = await fetchComments();\r\n            const sortedComments = sortCommentsOnLevel(fetchedComments);\r\n            setComments(sortedComments);\r\n\r\n        };\r\n\r\n        fetchAndSortComments();\r\n\r\n        setIsReadyToRender(true);\r\n    }, []);\r\n\r\n\r\n    const handleSubmitCommentButton = async () => {\r\n        console.log(\"0\");\r\n        await fetch(\"http://localhost:3001/postComment\", {\r\n            // const { author, comment, idOfParentPost, level } = req.body;\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body:\r\n                JSON.stringify({\r\n                    author: username,\r\n                    comment: commentToPost,\r\n                    idOfParentComment: location.state.id,\r\n                    level: 0\r\n                })\r\n        });\r\n        console.log(\"1)\");\r\n    };\r\n\r\n    const changeCommentToPost = (event) => {\r\n        setCommentToPost(event.target.value);\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            const postId = location.state._id;\r\n\r\n            const response = await fetch(`http://localhost:3001/post/${postId}/comments`);\r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error fetching comments : \", error);\r\n        }\r\n    };\r\n\r\n    const sortCommentsOnLevel = (dataComments) => {\r\n        // sort the comments on order, so all 0's in front, then 1's, etc\r\n        const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\r\n            if (firstComment.level > secondComment.level) {\r\n                return 1;\r\n            }\r\n            else if (firstComment.level === secondComment.level) {\r\n                return 0;\r\n            }\r\n            else return -1;\r\n        });\r\n        return sortedDataComments;\r\n    }\r\n\r\n    const divideCommentsIntoLevelArrays = () => {\r\n        // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\r\n        const levelArrays = [];\r\n        var currLevel = 0;\r\n        while (true) {\r\n\r\n            const temp = comments.filter((comment) => {\r\n                return comment.level === currLevel;\r\n            });\r\n            if (temp.length === 0) {\r\n\r\n                break;\r\n            }\r\n            else {\r\n\r\n                levelArrays.push(temp);\r\n                currLevel++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return levelArrays;\r\n    };\r\n\r\n    const renderEachLevel = (levelArrays, currentComment, level) => {\r\n\r\n\r\n        const renderedComments = [];\r\n        const temp = [];\r\n        // render itself\r\n\r\n        renderedComments.push(renderComment(currentComment));\r\n\r\n        // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \r\n        // trigger outOfBounds error\r\n        if (level === levelArrays.length - 1) {\r\n\r\n            return renderedComments;\r\n        }\r\n        else {\r\n            // find all matching child comments in next level\r\n            for (let i = 0; i < levelArrays[level + 1].length; i++) {\r\n\r\n                if (levelArrays[level + 1][i].idOfParentComment === currentComment._id) { // parentCommentId undefined?\r\n\r\n                    temp.push(levelArrays[level + 1][i]);\r\n                }\r\n            }\r\n\r\n            // render all of its child comments\r\n            for (let k = 0; k < temp.length; k++) {\r\n\r\n                const renderedLevel = renderEachLevel(levelArrays, temp[k], level + 1);\r\n                for (let l = 0; l < renderedLevel.length; l++) {\r\n                    renderedComments.push(renderedLevel[l]);\r\n                }\r\n\r\n                return renderedComments;\r\n                // renderEachLevel(levelArrays, temp[k], level + 1);\r\n            }\r\n\r\n            // if no children, then return renderedComments\r\n            return renderedComments;\r\n        }\r\n\r\n        // 1) render itself\r\n\r\n        // 2) make empty array\r\n        // 3) go through next level array and add any posts whose parentComment matches postId to array\r\n        // 4) for every element in array : \r\n        // 5) renderComment(postId, level + 1)\r\n\r\n    };\r\n\r\n    const renderComment = (comment) => {\r\n\r\n        return (\r\n            // <Comment />\r\n            <Comment post={location.state._id} author={comment.author} comment={comment.comment} level={comment.level} id={comment._id} />\r\n\r\n        );\r\n\r\n    };\r\n\r\n    const renderComments = () => {\r\n        if (comments.length === 0) {\r\n            console.log(\"no comments available to render yet\");\r\n        }\r\n        else {\r\n            const overallRenderedComments = [];\r\n            const levelArrays = divideCommentsIntoLevelArrays();\r\n\r\n\r\n            for (let i = 0; i < levelArrays[0].length; i++) {\r\n                const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\r\n                for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\r\n                    overallRenderedComments.push(\r\n                        React.cloneElement(arrayOfRecursiveElementsHTML[j], { key: arrayOfRecursiveElementsHTML[j].props.id })\r\n                    );\r\n                }\r\n            }\r\n            return overallRenderedComments;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div id=\"post-title-and-description-section\">\r\n                <div id=\"post-title-div\">{location.state.title}</div>\r\n                <div id=\"post-description-div\">{location.state.description}</div>\r\n            </div>\r\n\r\n            <input type=\"text\" id=\"post-new-comment-box\" value={commentToPost}\r\n                placeholder=\"Post comment here\" onChange={changeCommentToPost}></input>\r\n            <button id=\"submit-comment-button\" onClick={handleSubmitCommentButton}>Submit</button>\r\n\r\n            <div className=\"comments-section\">\r\n                {isReadyToRender ? renderComments() : <p>Loading comments...</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}