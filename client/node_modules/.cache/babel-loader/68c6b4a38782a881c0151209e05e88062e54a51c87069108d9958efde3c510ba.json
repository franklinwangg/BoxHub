{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\Projects\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Comment\\\\Comment.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import { useNavigate, useLocation } from 'react-router-dom';\n// import \"./Comment.css\";\n\n// const Comment = (props) => {\n//     // {post, author, comment, level, id }\n\n//     const [replyCommentToPost, setReplyCommentToPost] = useState(\"\");\n\n//     const handleReplyToCommentButton = () => {\n\n//         const postId = props.post;\n//         const commentId = props.id;\n\n//         fetch(`http://localhost:3001/post/${postId}/${commentId}`, {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 // Add other headers here if necessary, like Authorization\n//             },\n//             body: JSON.stringify({\n//                 author: props.author,\n//                 comment: replyCommentToPost,\n\n//                 parentPost : props.parentPost,\n\n//                 idOfParentPost: props.post,\n//                 level: props.level + 1,\n//                 idOfParentComment: props.id,\n//             }),\n//         });\n\n//     };\n\n//     const changeReplyCommentToPost = (event) => {\n//         setReplyCommentToPost(event.target.value);\n//     };\n\n//     return (\n\n//         <div style={{ marginLeft: props.level * 20 + 'px', marginTop: '10px' }}>\n//             <input type=\"text\" id=\"reply-to-comment-box\" value={replyCommentToPost}\n//                 placeholder=\"Reply to this comment...\" onChange={changeReplyCommentToPost}></input>\n//             <button id=\"reply-to-comment-button\" onClick={handleReplyToCommentButton}>Reply</button>\n\n//             <div id=\"comment-author\">Author : {props.author}</div>\n//             <div id=\"comment-contents\">Comment : {props.comment}</div>\n\n//             {/* <button id=\"reply-to-comment-button\">Reply</button> */}\n//         </div>\n//     );\n// };\n\n// export default Comment;\n\nimport React, { useState } from 'react';\nimport \"./Comment.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = props => {\n  _s();\n  const [replyCommentToPost, setReplyCommentToPost] = useState(\"\");\n  const handleReplyToCommentButton = async () => {\n    const postId = props.post;\n    const commentId = props.id;\n    try {\n      const response = await fetch(`http://localhost:3001/post/${postId}/${commentId}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          author: props.author,\n          comment: replyCommentToPost,\n          parentPost: props.parentPost,\n          idOfParentPost: props.post,\n          level: props.level + 1,\n          idOfParentComment: props.id\n        })\n      });\n      if (response.ok) {\n        setReplyCommentToPost(\"\"); // Clear input after successful post\n      } else {\n        console.error(\"Failed to post reply\");\n      }\n    } catch (error) {\n      console.error(\"Error posting reply:\", error);\n    }\n  };\n  const changeReplyCommentToPost = event => {\n    setReplyCommentToPost(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-container\",\n    style: {\n      marginLeft: props.level * 20 + 'px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-author\",\n        children: [\"Author: \", props.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-contents\",\n        children: props.comment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reply-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"reply-input\",\n        value: replyCommentToPost,\n        placeholder: \"Reply to this comment...\",\n        onChange: changeReplyCommentToPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reply-button\",\n        onClick: handleReplyToCommentButton,\n        children: \"Reply\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(Comment, \"F42mIQMmoxTw1G3PukEIdoAMbZY=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Comment","props","_s","replyCommentToPost","setReplyCommentToPost","handleReplyToCommentButton","postId","post","commentId","id","response","fetch","method","headers","body","JSON","stringify","author","comment","parentPost","idOfParentPost","level","idOfParentComment","ok","console","error","changeReplyCommentToPost","event","target","value","className","style","marginLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/Projects/Boxing Forum Website/client/src/components/Posts/Comment/Comment.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n// import \"./Comment.css\";\r\n\r\n\r\n// const Comment = (props) => {\r\n//     // {post, author, comment, level, id }\r\n\r\n//     const [replyCommentToPost, setReplyCommentToPost] = useState(\"\");\r\n\r\n\r\n//     const handleReplyToCommentButton = () => {\r\n\r\n//         const postId = props.post;\r\n//         const commentId = props.id;\r\n\r\n//         fetch(`http://localhost:3001/post/${postId}/${commentId}`, {\r\n//             method: \"POST\",\r\n//             headers: {\r\n//                 \"Content-Type\": \"application/json\",\r\n//                 // Add other headers here if necessary, like Authorization\r\n//             },\r\n//             body: JSON.stringify({\r\n//                 author: props.author,\r\n//                 comment: replyCommentToPost,\r\n\r\n//                 parentPost : props.parentPost,\r\n\r\n//                 idOfParentPost: props.post,\r\n//                 level: props.level + 1,\r\n//                 idOfParentComment: props.id,\r\n//             }),\r\n//         });\r\n        \r\n\r\n//     };\r\n\r\n//     const changeReplyCommentToPost = (event) => {\r\n//         setReplyCommentToPost(event.target.value);\r\n//     };\r\n\r\n//     return (\r\n\r\n//         <div style={{ marginLeft: props.level * 20 + 'px', marginTop: '10px' }}>\r\n//             <input type=\"text\" id=\"reply-to-comment-box\" value={replyCommentToPost}\r\n//                 placeholder=\"Reply to this comment...\" onChange={changeReplyCommentToPost}></input>\r\n//             <button id=\"reply-to-comment-button\" onClick={handleReplyToCommentButton}>Reply</button>\r\n\r\n//             <div id=\"comment-author\">Author : {props.author}</div>\r\n//             <div id=\"comment-contents\">Comment : {props.comment}</div>\r\n\r\n//             {/* <button id=\"reply-to-comment-button\">Reply</button> */}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Comment;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport \"./Comment.css\";\r\n\r\nconst Comment = (props) => {\r\n    const [replyCommentToPost, setReplyCommentToPost] = useState(\"\");\r\n\r\n    const handleReplyToCommentButton = async () => {\r\n        const postId = props.post;\r\n        const commentId = props.id;\r\n\r\n        try {\r\n            const response = await fetch(`http://localhost:3001/post/${postId}/${commentId}`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    author: props.author,\r\n                    comment: replyCommentToPost,\r\n                    parentPost: props.parentPost,\r\n                    idOfParentPost: props.post,\r\n                    level: props.level + 1,\r\n                    idOfParentComment: props.id,\r\n                }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setReplyCommentToPost(\"\"); // Clear input after successful post\r\n            } else {\r\n                console.error(\"Failed to post reply\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error posting reply:\", error);\r\n        }\r\n    };\r\n\r\n    const changeReplyCommentToPost = (event) => {\r\n        setReplyCommentToPost(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-container\" style={{ marginLeft: props.level * 20 + 'px' }}>\r\n            <div className=\"comment-box\">\r\n                <div className=\"comment-author\">Author: {props.author}</div>\r\n                <div className=\"comment-contents\">{props.comment}</div>\r\n            </div>\r\n            <div className=\"reply-section\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"reply-input\"\r\n                    value={replyCommentToPost}\r\n                    placeholder=\"Reply to this comment...\"\r\n                    onChange={changeReplyCommentToPost}\r\n                />\r\n                <button className=\"reply-button\" onClick={handleReplyToCommentButton}>\r\n                    Reply\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}