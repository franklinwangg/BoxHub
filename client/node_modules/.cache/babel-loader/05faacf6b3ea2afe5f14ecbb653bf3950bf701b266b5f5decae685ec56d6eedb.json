{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\Projects\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Post\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Comment from '../Comment/Comment';\nimport UserContext from '../../../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const location = useLocation();\n  const [comments, setComments] = useState([]);\n  const {\n    username,\n    setUsername\n  } = useContext(UserContext);\n  const [commentToPost, setCommentToPost] = useState(\"\");\n  const [isReadyToRender, setIsReadyToRender] = useState(false);\n  useEffect(() => {\n    const fetchAndSortComments = async () => {\n      const fetchedComments = await fetchComments();\n      const sortedComments = sortCommentsOnLevel(fetchedComments);\n      setComments(sortedComments);\n    };\n    fetchAndSortComments();\n    setIsReadyToRender(true);\n  }, []);\n  const handleReplySubmission = async () => {\n    const fetchedComments = await fetchComments();\n    setComments(fetchedComments);\n  };\n  const handleSubmitCommentButton = async () => {\n    const author = username;\n    const comment = commentToPost;\n    const idOfParentPost = location.state._id;\n    try {\n      await fetch(\"http://localhost:3001/postComment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          author: author,\n          comment: comment,\n          idOfParentPost: idOfParentPost,\n          level: 0\n        })\n      });\n      const fetchedComments = await fetchComments();\n      setComments(fetchedComments);\n      setCommentToPost(\"\");\n    } catch (error) {\n      console.log(\"uh oh! error is \", error);\n    }\n  };\n  const changeCommentToPost = event => {\n    setCommentToPost(event.target.value);\n  };\n  const fetchComments = async () => {\n    try {\n      const postId = location.state._id;\n      const response = await fetch(`http://localhost:3001/post/${postId}/comments`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(\"Error fetching comments : \", error);\n    }\n  };\n  const sortCommentsOnLevel = dataComments => {\n    // sort the comments on order, so all 0's in front, then 1's, etc\n    const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\n      if (firstComment.level > secondComment.level) {\n        return 1;\n      } else if (firstComment.level === secondComment.level) {\n        return 0;\n      } else return -1;\n    });\n    return sortedDataComments;\n  };\n  const divideCommentsIntoLevelArrays = () => {\n    // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\n    const levelArrays = [];\n    var currLevel = 0;\n    while (true) {\n      const temp = comments.filter(comment => {\n        return comment.level === currLevel;\n      });\n      if (temp.length === 0) {\n        break;\n      } else {\n        levelArrays.push(temp);\n        currLevel++;\n      }\n    }\n    return levelArrays;\n  };\n  const renderEachLevel = (levelArrays, currentComment, level) => {\n    console.log(\"CURRENTLY RENDERING : \", currentComment.comment);\n    for (let i = 0; i < levelArrays.length; i++) {\n      for (let j = 0; j < levelArrays[i].length; j++) {\n        console.log(levelArrays[i][j].comment);\n      }\n    }\n    const renderedComments = [];\n    const temp = [];\n    // render itself\n\n    renderedComments.push(renderComment(currentComment));\n\n    // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \n    // trigger outOfBounds error\n    if (level === levelArrays.length - 1) {\n      return renderedComments;\n    } else {\n      // find all matching child comments in next level\n      for (let i = 0; i < levelArrays[level + 1].length; i++) {\n        if (levelArrays[level + 1][i].idOfParentComment === currentComment._id) {\n          // parentCommentId undefined?\n\n          temp.push(levelArrays[level + 1][i]);\n        }\n      }\n      if (currentComment.comment === \"2\") {\n        console.log(\"temp length is \", temp.length);\n      }\n      // console.log(\"starting here\");\n      // for(let i = 0; i < temp.length; i ++) {\n      //     console.log(\"temp[i] \", temp[i]);\n      // }\n\n      // render all of its child comments\n      for (let k = 0; k < temp.length; k++) {\n        console.log(\"k is \", k);\n        const renderedLevel = renderEachLevel(levelArrays, temp[k], level + 1);\n        for (let l = 0; l < renderedLevel.length; l++) {\n          renderedComments.push(renderedLevel[l]);\n        }\n        for (let i = 0; i < renderedComments.length; i++) {\n          console.log(\"i \", i);\n          console.log(\"renderedComment \", renderedComments[i]);\n        }\n        return renderedComments;\n        // renderEachLevel(levelArrays, temp[k], level + 1);\n      }\n\n      // if no children, then return renderedComments\n\n      return renderedComments;\n    }\n\n    // 1) render itself\n\n    // 2) make empty array\n    // 3) go through next level array and add any posts whose parentComment matches postId to array\n    // 4) for every element in array : \n    // 5) renderComment(postId, level + 1)\n  };\n  const renderComment = comment => {\n    return (\n      /*#__PURE__*/\n      // <Comment />\n      _jsxDEV(Comment, {\n        post: location.state._id,\n        author: comment.author,\n        comment: comment.comment,\n        level: comment.level,\n        id: comment._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this)\n    );\n  };\n  const renderComments = () => {\n    if (comments.length === 0) {\n      console.log(\"no comments available to render yet\");\n    } else {\n      const overallRenderedComments = [];\n      const levelArrays = divideCommentsIntoLevelArrays();\n      for (let i = 0; i < levelArrays[0].length; i++) {\n        const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\n        // console.log(\"arrayofrecursiveelementshtml length : \", arrayOfRecursiveElementsHTML.length);\n        for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\n          overallRenderedComments.push( /*#__PURE__*/React.cloneElement(arrayOfRecursiveElementsHTML[j], {\n            key: arrayOfRecursiveElementsHTML[j].props.id\n          }));\n        }\n      }\n\n      // console.log(\"length : \", overallRenderedComments.length);\n      // for(let i = 0; i < overallRenderedComments.length; i ++) {\n      //     console.log(overallRenderedComments[i]);\n      // }\n      return overallRenderedComments;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-title-and-description-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-title-div\",\n        children: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-description-div\",\n        children: location.state.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"post-new-comment-box\",\n      value: commentToPost,\n      placeholder: \"Post comment here\",\n      onChange: changeCommentToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-comment-button\",\n      onClick: handleSubmitCommentButton,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-section\",\n      children: isReadyToRender ? renderComments() : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading comments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 55\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"ITN1dq39wdhNhv4nCP4vgugjp48=\", false, function () {\n  return [useLocation];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","Comment","UserContext","jsxDEV","_jsxDEV","Post","_s","location","comments","setComments","username","setUsername","commentToPost","setCommentToPost","isReadyToRender","setIsReadyToRender","fetchAndSortComments","fetchedComments","fetchComments","sortedComments","sortCommentsOnLevel","handleReplySubmission","handleSubmitCommentButton","author","comment","idOfParentPost","state","_id","fetch","method","headers","body","JSON","stringify","level","error","console","log","changeCommentToPost","event","target","value","postId","response","data","json","dataComments","sortedDataComments","sort","firstComment","secondComment","divideCommentsIntoLevelArrays","levelArrays","currLevel","temp","filter","length","push","renderEachLevel","currentComment","i","j","renderedComments","renderComment","idOfParentComment","k","renderedLevel","l","post","id","fileName","_jsxFileName","lineNumber","columnNumber","renderComments","overallRenderedComments","arrayOfRecursiveElementsHTML","cloneElement","key","props","children","title","description","type","placeholder","onChange","onClick","className","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/Projects/Boxing Forum Website/client/src/components/Posts/Post/Post.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Comment from '../Comment/Comment';\r\nimport UserContext from '../../../context/UserContext';\r\n\r\n\r\nconst Post = () => {\r\n\r\n    const location = useLocation();\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const { username, setUsername } = useContext(UserContext);\r\n    const [commentToPost, setCommentToPost] = useState(\"\");\r\n    const [isReadyToRender, setIsReadyToRender] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchAndSortComments = async () => {\r\n            const fetchedComments = await fetchComments();\r\n            const sortedComments = sortCommentsOnLevel(fetchedComments);\r\n            setComments(sortedComments);\r\n        };\r\n\r\n        fetchAndSortComments();\r\n\r\n        setIsReadyToRender(true);\r\n    }, []);\r\n\r\n    const handleReplySubmission = async () => {\r\n        const fetchedComments = await fetchComments();\r\n        setComments(fetchedComments);\r\n\r\n    };\r\n\r\n    const handleSubmitCommentButton = async () => {\r\n\r\n        const author = username;\r\n        const comment = commentToPost;\r\n        const idOfParentPost = location.state._id;\r\n\r\n        try {\r\n            await fetch(\"http://localhost:3001/postComment\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    author: author,\r\n                    comment: comment,\r\n                    idOfParentPost: idOfParentPost,\r\n                    level: 0\r\n                })\r\n            });\r\n    \r\n            const fetchedComments = await fetchComments();\r\n            setComments(fetchedComments);\r\n            setCommentToPost(\"\");\r\n        }\r\n        catch(error) {\r\n            console.log(\"uh oh! error is \", error);\r\n        }\r\n\r\n    };\r\n\r\n    const changeCommentToPost = (event) => {\r\n        setCommentToPost(event.target.value);\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            const postId = location.state._id;\r\n\r\n            const response = await fetch(`http://localhost:3001/post/${postId}/comments`);\r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error fetching comments : \", error);\r\n        }\r\n    };\r\n\r\n    const sortCommentsOnLevel = (dataComments) => {\r\n        // sort the comments on order, so all 0's in front, then 1's, etc\r\n        const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\r\n            if (firstComment.level > secondComment.level) {\r\n                return 1;\r\n            }\r\n            else if (firstComment.level === secondComment.level) {\r\n                return 0;\r\n            }\r\n            else return -1;\r\n        });\r\n        return sortedDataComments;\r\n    }\r\n\r\n    const divideCommentsIntoLevelArrays = () => {\r\n        // first, separate comments into new Level arrays - one array for all Level0's, another for Level1's, etc\r\n        const levelArrays = [];\r\n        var currLevel = 0;\r\n        while (true) {\r\n\r\n            const temp = comments.filter((comment) => {\r\n                return comment.level === currLevel;\r\n            });\r\n            if (temp.length === 0) {\r\n\r\n                break;\r\n            }\r\n            else {\r\n\r\n                levelArrays.push(temp);\r\n                currLevel++;\r\n            }\r\n        }\r\n\r\n\r\n\r\n        return levelArrays;\r\n    };\r\n\r\n    const renderEachLevel = (levelArrays, currentComment, level) => {\r\n\r\n\r\n        console.log(\"CURRENTLY RENDERING : \", currentComment.comment);\r\n        for(let i = 0; i < levelArrays.length; i ++) {\r\n            for(let j = 0; j < levelArrays[i].length; j ++) {\r\n                console.log(levelArrays[i][j].comment);\r\n            }\r\n        }\r\n        const renderedComments = [];\r\n        const temp = [];\r\n        // render itself\r\n\r\n        renderedComments.push(renderComment(currentComment));\r\n\r\n        // if comment is on last level of levelArrays, we need to stop it cuz otherwise will \r\n        // trigger outOfBounds error\r\n        if (level === levelArrays.length - 1) {\r\n\r\n            return renderedComments;\r\n        }\r\n        else {\r\n            // find all matching child comments in next level\r\n            for (let i = 0; i < levelArrays[level + 1].length; i++) {\r\n\r\n                if (levelArrays[level + 1][i].idOfParentComment === currentComment._id) { // parentCommentId undefined?\r\n\r\n                    temp.push(levelArrays[level + 1][i]);\r\n\r\n                }\r\n            }\r\n\r\n            if(currentComment.comment === \"2\") {\r\n                console.log(\"temp length is \", temp.length);\r\n            }\r\n            // console.log(\"starting here\");\r\n            // for(let i = 0; i < temp.length; i ++) {\r\n            //     console.log(\"temp[i] \", temp[i]);\r\n            // }\r\n\r\n            // render all of its child comments\r\n            for (let k = 0; k < temp.length; k++) {\r\n                console.log(\"k is \", k);\r\n                const renderedLevel = renderEachLevel(levelArrays, temp[k], level + 1);\r\n                for (let l = 0; l < renderedLevel.length; l++) {\r\n                    renderedComments.push(renderedLevel[l]);\r\n                }\r\n\r\n                for(let i = 0; i < renderedComments.length; i ++) {\r\n                    console.log(\"i \", i);\r\n                    console.log(\"renderedComment \", renderedComments[i]);\r\n                }\r\n\r\n                return renderedComments;\r\n                // renderEachLevel(levelArrays, temp[k], level + 1);\r\n                \r\n            }\r\n\r\n            // if no children, then return renderedComments\r\n\r\n            return renderedComments;\r\n        }\r\n\r\n        // 1) render itself\r\n\r\n        // 2) make empty array\r\n        // 3) go through next level array and add any posts whose parentComment matches postId to array\r\n        // 4) for every element in array : \r\n        // 5) renderComment(postId, level + 1)\r\n\r\n    };\r\n\r\n    const renderComment = (comment) => {\r\n\r\n        return (\r\n            // <Comment />\r\n            <Comment post={location.state._id} author={comment.author} comment={comment.comment} level={comment.level} id={comment._id} />\r\n\r\n        );\r\n\r\n    };\r\n\r\n    const renderComments = () => {\r\n        if (comments.length === 0) {\r\n            console.log(\"no comments available to render yet\");\r\n        }\r\n        else {\r\n            const overallRenderedComments = [];\r\n            const levelArrays = divideCommentsIntoLevelArrays();\r\n\r\n\r\n            for (let i = 0; i < levelArrays[0].length; i++) {\r\n                const arrayOfRecursiveElementsHTML = renderEachLevel(levelArrays, levelArrays[0][i], 0);\r\n                // console.log(\"arrayofrecursiveelementshtml length : \", arrayOfRecursiveElementsHTML.length);\r\n                for (let j = 0; j < arrayOfRecursiveElementsHTML.length; j++) {\r\n                    overallRenderedComments.push(\r\n                        React.cloneElement(arrayOfRecursiveElementsHTML[j], { key: arrayOfRecursiveElementsHTML[j].props.id })\r\n                    );\r\n                }\r\n            }\r\n\r\n            // console.log(\"length : \", overallRenderedComments.length);\r\n            // for(let i = 0; i < overallRenderedComments.length; i ++) {\r\n            //     console.log(overallRenderedComments[i]);\r\n            // }\r\n            return overallRenderedComments;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div id=\"post-title-and-description-section\">\r\n                <div id=\"post-title-div\">{location.state.title}</div>\r\n                <div id=\"post-description-div\">{location.state.description}</div>\r\n            </div>\r\n\r\n            <input type=\"text\" id=\"post-new-comment-box\" value={commentToPost}\r\n                placeholder=\"Post comment here\" onChange={changeCommentToPost}></input>\r\n            <button id=\"submit-comment-button\" onClick={handleSubmitCommentButton}>Submit</button>\r\n\r\n            <div className=\"comments-section\">\r\n                {isReadyToRender ? renderComments() : <p>Loading comments...</p>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}