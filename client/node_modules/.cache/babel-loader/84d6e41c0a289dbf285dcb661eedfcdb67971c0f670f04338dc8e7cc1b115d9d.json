{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\Projects\\\\Boxing Forum Website\\\\client\\\\src\\\\components\\\\Posts\\\\Post\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport UserContext from '../../../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Post = () => {\n  _s();\n  const location = useLocation();\n  const [comments, setComments] = useState([]);\n  const {\n    username,\n    setUsername\n  } = useContext(UserContext);\n  const [commentToPost, setCommentToPost] = useState(\"\");\n  useEffect(() => {\n    const fetchAndSortComments = async () => {\n      console.log(\"hii\");\n      const fetchedComments = await fetchComments();\n      console.log(\"fetched comments length : \", fetchedComments.length);\n      const sortedComments = sortCommentsOnLevel(fetchedComments);\n      console.log(\"sorted comments length : \", sortedComments.length);\n      setComments(sortedComments);\n    };\n    fetchAndSortComments();\n  }, []);\n  const handleSubmitCommentButton = () => {\n    const author = username;\n    const comment = commentToPost;\n    const idOfParentPost = location.state._id;\n    fetch(\"http://localhost:3001/postComment\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        author: author,\n        comment: comment,\n        idOfParentPost: idOfParentPost,\n        level: 0\n      })\n    });\n  };\n  const fetchComments = async () => {\n    try {\n      // console.log(\"hi\");\n      const postId = location.state._id;\n      const response = await fetch(`http://localhost:3001/post/${postId}/comments`);\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.log(\"Error fetching comments : \", error);\n    }\n  };\n  const sortCommentsOnLevel = dataComments => {\n    // sort the comments on order, so all 0's in front, then 1's, etc\n    const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\n      if (firstComment.level > secondComment.level) {\n        return 1;\n      } else if (firstComment.level === secondComment.level) {\n        return 0;\n      } else return -1;\n    });\n    return sortedDataComments;\n  };\n  const renderComment = comment => {\n    // if this is level 0, then render it right away\n    console.log(\"rendering\");\n    if (comment.level === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"comment-author\",\n          children: [\"Author : \", comment.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"comment-contents\",\n          children: comment.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this);\n    }\n\n    // first find parent comment of this comment\n    // somehow render this so that this is the child comment underneath the parent comment\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"post-title-and-description-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-title-div\",\n        children: location.state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"post-description-div\",\n        children: location.state.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"post-new-comment-box\",\n      value: commentToPost,\n      placeholder: \"Post comment here\",\n      onChange: changeCommentToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"submit-comment-button\",\n      onClick: handleSubmitCommentButton,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"comments-section\",\n      children: comments.map(comment => {\n        return renderComment(comment);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(Post, \"0O4zjQzmahGyb+2O5spWaxcjpXk=\", false, function () {\n  return [useLocation];\n});\n_c = Post;\nexport default Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useLocation","UserContext","jsxDEV","_jsxDEV","Post","_s","location","comments","setComments","username","setUsername","commentToPost","setCommentToPost","fetchAndSortComments","console","log","fetchedComments","fetchComments","length","sortedComments","sortCommentsOnLevel","handleSubmitCommentButton","author","comment","idOfParentPost","state","_id","fetch","method","headers","body","JSON","stringify","level","postId","response","data","json","error","dataComments","sortedDataComments","sort","firstComment","secondComment","renderComment","children","id","fileName","_jsxFileName","lineNumber","columnNumber","description","title","type","value","placeholder","onChange","changeCommentToPost","onClick","map","_c","$RefreshReg$"],"sources":["C:/Users/frank/Desktop/Projects/Boxing Forum Website/client/src/components/Posts/Post/Post.js"],"sourcesContent":["import React, {useState, useEffect, useContext} from 'react';\r\nimport { useLocation} from 'react-router-dom';\r\nimport UserContext from '../../../context/UserContext';\r\n\r\n\r\nconst Post = () => {\r\n\r\n    const location = useLocation();\r\n    const [comments, setComments] = useState([]);\r\n\r\n    const {username, setUsername} = useContext(UserContext);\r\n    const [commentToPost, setCommentToPost] = useState(\"\");\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchAndSortComments = async () => {\r\n            console.log(\"hii\");\r\n            const fetchedComments = await fetchComments();\r\n            console.log(\"fetched comments length : \", fetchedComments.length);\r\n            const sortedComments = sortCommentsOnLevel(fetchedComments);\r\n            console.log(\"sorted comments length : \", sortedComments.length);\r\n\r\n            setComments(sortedComments);\r\n        };\r\n\r\n        fetchAndSortComments();\r\n    }, []);\r\n\r\n\r\n    const handleSubmitCommentButton = () => {\r\n\r\n        const author = username;\r\n\r\n        const comment = commentToPost;\r\n        const idOfParentPost = location.state._id;\r\n\r\n\r\n\r\n        fetch(\"http://localhost:3001/postComment\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n                author: author,\r\n                comment: comment,\r\n                idOfParentPost: idOfParentPost,\r\n                level : 0\r\n            })\r\n        });\r\n\r\n    };\r\n\r\n    const fetchComments = async () => {\r\n        try {\r\n            // console.log(\"hi\");\r\n            const postId = location.state._id;\r\n\r\n            const response = await fetch(`http://localhost:3001/post/${postId}/comments`); \r\n            const data = await response.json();\r\n            return data;\r\n        }\r\n        catch (error) {\r\n            console.log(\"Error fetching comments : \", error);\r\n        }\r\n    };\r\n\r\n    const sortCommentsOnLevel = (dataComments) => {\r\n        // sort the comments on order, so all 0's in front, then 1's, etc\r\n        const sortedDataComments = dataComments.sort((firstComment, secondComment) => {\r\n            if (firstComment.level > secondComment.level) {\r\n                return 1;\r\n            }\r\n            else if (firstComment.level === secondComment.level) {\r\n                return 0;\r\n            }\r\n            else return -1;\r\n        });\r\n        return sortedDataComments;\r\n    }\r\n\r\n    const renderComment = (comment) => {\r\n        // if this is level 0, then render it right away\r\n        console.log(\"rendering\");\r\n        if(comment.level === 0) {\r\n            return (\r\n                <div>\r\n                    <div id=\"comment-author\">Author : {comment.author}</div>\r\n                    <div id = \"comment-contents\">{comment.description}</div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        // first find parent comment of this comment\r\n        // somehow render this so that this is the child comment underneath the parent comment\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div id=\"post-title-and-description-section\">\r\n                <div id=\"post-title-div\">{location.state.title}</div>\r\n                <div id=\"post-description-div\">{location.state.description}</div>\r\n            </div>\r\n\r\n            <input type=\"text\" id=\"post-new-comment-box\" value={commentToPost}\r\n                placeholder=\"Post comment here\" onChange={changeCommentToPost}></input>\r\n            <button id=\"submit-comment-button\" onClick={handleSubmitCommentButton}>Submit</button>\r\n    \r\n\r\n            <div id=\"comments-section\">\r\n                {comments.map((comment) => {\r\n                    return renderComment(comment);\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAO,OAAO;AAC5D,SAASC,WAAW,QAAO,kBAAkB;AAC7C,OAAOC,WAAW,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM;IAACY,QAAQ;IAAEC;EAAW,CAAC,GAAGX,UAAU,CAACE,WAAW,CAAC;EACvD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAItDC,SAAS,CAAC,MAAM;IAEZ,MAAMe,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACrCC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;MAClB,MAAMC,eAAe,GAAG,MAAMC,aAAa,CAAC,CAAC;MAC7CH,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,eAAe,CAACE,MAAM,CAAC;MACjE,MAAMC,cAAc,GAAGC,mBAAmB,CAACJ,eAAe,CAAC;MAC3DF,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEI,cAAc,CAACD,MAAM,CAAC;MAE/DV,WAAW,CAACW,cAAc,CAAC;IAC/B,CAAC;IAEDN,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMQ,yBAAyB,GAAGA,CAAA,KAAM;IAEpC,MAAMC,MAAM,GAAGb,QAAQ;IAEvB,MAAMc,OAAO,GAAGZ,aAAa;IAC7B,MAAMa,cAAc,GAAGlB,QAAQ,CAACmB,KAAK,CAACC,GAAG;IAIzCC,KAAK,CAAC,mCAAmC,EAAE;MACvCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBV,MAAM,EAAEA,MAAM;QACdC,OAAO,EAAEA,OAAO;QAChBC,cAAc,EAAEA,cAAc;QAC9BS,KAAK,EAAG;MACZ,CAAC;IACL,CAAC,CAAC;EAEN,CAAC;EAED,MAAMhB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA;MACA,MAAMiB,MAAM,GAAG5B,QAAQ,CAACmB,KAAK,CAACC,GAAG;MAEjC,MAAMS,QAAQ,GAAG,MAAMR,KAAK,CAAC,8BAA8BO,MAAM,WAAW,CAAC;MAC7E,MAAME,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI;IACf,CAAC,CACD,OAAOE,KAAK,EAAE;MACVxB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEuB,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAMlB,mBAAmB,GAAImB,YAAY,IAAK;IAC1C;IACA,MAAMC,kBAAkB,GAAGD,YAAY,CAACE,IAAI,CAAC,CAACC,YAAY,EAAEC,aAAa,KAAK;MAC1E,IAAID,YAAY,CAACT,KAAK,GAAGU,aAAa,CAACV,KAAK,EAAE;QAC1C,OAAO,CAAC;MACZ,CAAC,MACI,IAAIS,YAAY,CAACT,KAAK,KAAKU,aAAa,CAACV,KAAK,EAAE;QACjD,OAAO,CAAC;MACZ,CAAC,MACI,OAAO,CAAC,CAAC;IAClB,CAAC,CAAC;IACF,OAAOO,kBAAkB;EAC7B,CAAC;EAED,MAAMI,aAAa,GAAIrB,OAAO,IAAK;IAC/B;IACAT,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxB,IAAGQ,OAAO,CAACU,KAAK,KAAK,CAAC,EAAE;MACpB,oBACI9B,OAAA;QAAA0C,QAAA,gBACI1C,OAAA;UAAK2C,EAAE,EAAC,gBAAgB;UAAAD,QAAA,GAAC,WAAS,EAACtB,OAAO,CAACD,MAAM;QAAA;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACxD/C,OAAA;UAAK2C,EAAE,EAAG,kBAAkB;UAAAD,QAAA,EAAEtB,OAAO,CAAC4B;QAAW;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAEd;;IAMA;IACA;EAEJ,CAAC;EAED,oBACI/C,OAAA;IAAA0C,QAAA,gBAEI1C,OAAA;MAAK2C,EAAE,EAAC,oCAAoC;MAAAD,QAAA,gBACxC1C,OAAA;QAAK2C,EAAE,EAAC,gBAAgB;QAAAD,QAAA,EAAEvC,QAAQ,CAACmB,KAAK,CAAC2B;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACrD/C,OAAA;QAAK2C,EAAE,EAAC,sBAAsB;QAAAD,QAAA,EAAEvC,QAAQ,CAACmB,KAAK,CAAC0B;MAAW;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eAEN/C,OAAA;MAAOkD,IAAI,EAAC,MAAM;MAACP,EAAE,EAAC,sBAAsB;MAACQ,KAAK,EAAE3C,aAAc;MAC9D4C,WAAW,EAAC,mBAAmB;MAACC,QAAQ,EAAEC;IAAoB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3E/C,OAAA;MAAQ2C,EAAE,EAAC,uBAAuB;MAACY,OAAO,EAAErC,yBAA0B;MAAAwB,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGtF/C,OAAA;MAAK2C,EAAE,EAAC,kBAAkB;MAAAD,QAAA,EACrBtC,QAAQ,CAACoD,GAAG,CAAEpC,OAAO,IAAK;QACvB,OAAOqB,aAAa,CAACrB,OAAO,CAAC;MACjC,CAAC;IAAC;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAA7C,EAAA,CArHKD,IAAI;EAAA,QAEWJ,WAAW;AAAA;AAAA4D,EAAA,GAF1BxD,IAAI;AAuHV,eAAeA,IAAI;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}